{
  "name": "react-native-ide",
  "displayName": "Radon IDE",
  "description": "Extension turning VSCode into a full-featured IDE for React Native and Expo",
  "publisher": "swmansion",
  "categories": [
    "Programming Languages",
    "Debuggers"
  ],
  "keywords": [
    "react-native",
    "expo"
  ],
  "icon": "assets/logo.png",
  "pricing": "Trial",
  "activationEvents": [
    "workspaceContains:**/node_modules/react-native",
    "workspaceContains:**/app.json",
    "workspaceContains:**/metro.config.js",
    "workspaceContains:**/metro.config.ts",
    "workspaceContains:**/app.config.js",
    "workspaceContains:**/app.config.ts"
  ],
  "version": "1.4.1",
  "engines": {
    "vscode": "^1.75.0"
  },
  "extensionKind": [
    "workspace"
  ],
  "homepage": "https://ide.swmansion.com",
  "license": "https://ide.swmansion.com/legal",
  "repository": {
    "type": "git",
    "url": "https://github.com/software-mansion/radon-ide"
  },
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "RNIDE.openDevMenu",
        "title": "Open Dev Menu",
        "category": "Radon IDE",
        "enablement": "RNIDE.extensionIsActive"
      },
      {
        "command": "RNIDE.closePanel",
        "title": "Shutdown Radon IDE",
        "category": "Radon IDE",
        "icon": "$(radon-off)",
        "enablement": "RNIDE.extensionIsActive"
      },
      {
        "command": "RNIDE.openPanel",
        "title": "Open IDE Panel",
        "category": "Radon IDE",
        "enablement": "RNIDE.extensionIsActive && !RNIDE.panelIsOpen"
      },
      {
        "command": "RNIDE.showPanel",
        "title": "Show IDE Panel",
        "category": "Radon IDE",
        "enablement": "RNIDE.extensionIsActive && RNIDE.panelIsOpen"
      },
      {
        "command": "RNIDE.diagnose",
        "title": "Diagnostics",
        "category": "Radon IDE",
        "enablement": "!RNIDE.extensionIsActive"
      },
      {
        "command": "RNIDE.performBiometricAuthorization",
        "title": "Perform Biometric Authorization ",
        "category": "Radon IDE",
        "enablement": "RNIDE.extensionIsActive"
      },
      {
        "command": "RNIDE.performFailedBiometricAuthorization",
        "title": "Perform Failed Biometric Authorization",
        "category": "Radon IDE",
        "enablement": "RNIDE.extensionIsActive"
      },
      {
        "command": "RNIDE.captureReplay",
        "title": "Capture Replay",
        "category": "Radon IDE",
        "enablement": "RNIDE.extensionIsActive && RNIDE.panelIsOpen"
      },
      {
        "command": "RNIDE.toggleRecording",
        "title": "Toggle Recording",
        "category": "Radon IDE",
        "enablement": "RNIDE.extensionIsActive && RNIDE.panelIsOpen"
      },
      {
        "command": "RNIDE.captureScreenshot",
        "title": "Capture Screenshot",
        "category": "Radon IDE",
        "enablement": "RNIDE.extensionIsActive && RNIDE.panelIsOpen"
      }
    ],
    "keybindings": [
      {
        "command": "RNIDE.openDevMenu",
        "key": "ctrl+alt+z",
        "mac": "ctrl+cmd+z"
      },
      {
        "command": "RNIDE.closeWithConfirmation",
        "key": "ctrl+w",
        "mac": "cmd+w",
        "when": "RNIDE.isTabPanelFocused"
      },
      {
        "command": "RNIDE.performBiometricAuthorization",
        "key": "ctrl+shift+M",
        "mac": "cmd+shift+M"
      },
      {
        "command": "RNIDE.performFailedBiometricAuthorization",
        "key": "ctrl+shift+N",
        "mac": "cmd+shift+N"
      },
      {
        "command": "RNIDE.captureReplay",
        "key": "ctrl+shift+R",
        "mac": "cmd+shift+R"
      },
      {
        "command": "RNIDE.toggleRecording",
        "key": "ctrl+shift+E",
        "mac": "cmd+shift+E"
      },
      {
        "command": "RNIDE.captureScreenshot",
        "key": "ctrl+shift+A",
        "mac": "cmd+shift+A"
      }
    ],
    "configuration": {
      "title": "Radon IDE",
      "properties": {
        "RadonIDE.panelLocation": {
          "type": "string",
          "scope": "window",
          "default": "tab",
          "enum": [
            "tab",
            "side-panel",
            "secondary-side-panel"
          ],
          "description": "Controls location of the IDE panel. Due to vscode API limitations, when secondary side panel is selected, you need to manually move the IDE panel to the secondary side panel. Changing this option closes and reopens the IDE."
        },
        "RadonIDE.themeType": {
          "type": "string",
          "scope": "window",
          "default": "vscode",
          "enum": [
            "vscode",
            "built-in"
          ],
          "description": "Controls the theme of the IDE panel. If you encounter any issues, please report them. And set this to 'built-in' to use the built-in theme."
        },
        "RadonIDE.showDeviceFrame": {
          "type": "boolean",
          "scope": "window",
          "default": true,
          "description": "Shows device frame in the IDE panel."
        },
        "RadonIDE.inspectorExcludePattern": {
          "type": "string",
          "scope": "window",
          "default": null,
          "description": "Files matching this pattern fill be excluded for the inspector jump to file functionality. This can be used if your codebase has some design system primitives that are used everywhere in your codebase and that you don't want to always get opened when using inspect functionality."
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "RadonIDE",
          "title": "Radon IDE",
          "icon": "assets/logo.svg"
        }
      ],
      "panel": [
        {
          "id": "RadonIDEToolExpoDevPluginMMKV",
          "title": "MMKV",
          "icon": "assets/mmkv.svg"
        },
        {
          "id": "RadonIDEToolExpoDevPluginReduxDevTools",
          "title": "Redux",
          "icon": "assets/redux.svg"
        },
        {
          "id": "RadonIDEToolReduxDevTools",
          "title": "Redux",
          "icon": "assets/redux.svg"
        },
        {
          "id": "RadonIDEToolReactQueryDevTools",
          "title": "React Query",
          "icon": "assets/react-query.svg"
        },
        {
          "id": "RadonIDEToolNetwork",
          "title": "Network",
          "icon": "assets/network.svg"
        }
      ]
    },
    "views": {
      "RadonIDE": [
        {
          "type": "webview",
          "id": "RadonIDE.view",
          "name": "",
          "when": "RNIDE.extensionIsActive && config.RadonIDE.panelLocation != 'tab' && !RNIDE.sidePanelIsClosed"
        }
      ],
      "RadonIDEToolExpoDevPluginMMKV": [
        {
          "type": "webview",
          "id": "RNIDE.Tool.ExpoDevPlugin.MMKV.view",
          "name": "",
          "when": "RNIDE.Tool.ExpoDevPlugin.MMKV.available && RNIDE.panelIsOpen"
        }
      ],
      "RadonIDEToolExpoDevPluginReduxDevTools": [
        {
          "type": "webview",
          "id": "RNIDE.Tool.ExpoDevPlugin.ReduxDevTools.view",
          "name": "",
          "when": "RNIDE.Tool.ExpoDevPlugin.ReduxDevTools.available && RNIDE.panelIsOpen"
        }
      ],
      "RadonIDEToolNetwork": [
        {
          "type": "webview",
          "id": "RNIDE.Tool.Network.view",
          "name": "",
          "when": "RNIDE.Tool.Network.available && RNIDE.panelIsOpen"
        }
      ],
      "RadonIDEToolReduxDevTools": [
        {
          "type": "webview",
          "id": "RNIDE.Tool.ReduxDevTools.view",
          "name": "",
          "when": "RNIDE.Tool.ReduxDevTools.available && RNIDE.panelIsOpen"
        }
      ],
      "RadonIDEToolReactQueryDevTools": [
        {
          "type": "webview",
          "id": "RNIDE.Tool.ReactQueryDevTools.view",
          "name": "",
          "when": "RNIDE.Tool.ReactQueryDevTools.available && RNIDE.panelIsOpen"
        }
      ]
    },
    "menus": {
      "editor/title": [
        {
          "command": "RNIDE.openPanel",
          "group": "navigation",
          "when": "RNIDE.extensionIsActive && !RNIDE.panelIsOpen"
        }
      ],
      "view/title": [
        {
          "command": "RNIDE.closePanel",
          "group": "navigation",
          "when": "RNIDE.extensionIsActive && RNIDE.panelIsOpen && view == RadonIDE.view"
        }
      ]
    },
    "breakpoints": [
      {
        "language": "typescript"
      },
      {
        "language": "javascript"
      }
    ],
    "debuggers": [
      {
        "type": "com.swmansion.react-native-debugger",
        "label": "Radon IDE internal debugger for React Native projects",
        "hiddenWhen": "true",
        "languages": [
          "javascript",
          "typescript"
        ]
      },
      {
        "type": "com.swmansion.js-debugger",
        "label": "Radon IDE internal JavaScript debugger",
        "hiddenWhen": "true",
        "languages": [
          "javascript",
          "typescript"
        ]
      },
      {
        "type": "com.swmansion.proxy-debugger",
        "label": "Radon IDE internal debugger for React Native",
        "hiddenWhen": "true",
        "languages": [
          "javascript",
          "typescript"
        ]
      },
      {
        "type": "radon-pwa-node",
        "label": "Radon IDE internal debugger for React Native",
        "hiddenWhen": "true",
        "languages": [
          "javascript",
          "typescript"
        ]
      },
      {
        "type": "radon-ide",
        "label": "Radon IDE",
        "languages": [
          "javascript",
          "typescript",
          "javascriptreact",
          "typescriptreact"
        ],
        "configurationAttributes": {
          "launch": {
            "required": [],
            "properties": {
              "appRoot": {
                "type": "string",
                "description": "Location of the React Native application root folder relative to the workspace. This is used for monorepo type setups when the workspace root is not the root of the React Native project. The IDE extension tries to locate the React Native application root automatically, but in case it fails to do so (i.e. there are multiple applications defined in the workspace), you can use this setting to override the location."
              },
              "isExpo": {
                "type": "boolean",
                "description": "IDE tries to detect whether project uses Expo or React Native community CLI. This is needed when starting the bundler. If your project uses Expo but IDE fails to automatically detect it, you can set this parameter to `true` to force the use of Expo CLI."
              },
              "env": {
                "type": "object",
                "description": "Environment variables to be passed to all build/run commands that the IDE is launching."
              },
              "metroConfigPath": {
                "type": "string",
                "description": "Location of Metro config relative to the workspace. This is used for using custom configs for e.g. development."
              },
              "expoStartArgs": {
                "type": "array",
                "description": "Extra arguments to pass to Expo start command."
              },
              "customBuild": {
                "type": "object",
                "description": "Configuration for using custom scripts for building and fingerprinting the app.",
                "properties": {
                  "ios": {
                    "type": "object",
                    "description": "Configuration for iOS.",
                    "properties": {
                      "buildCommand": {
                        "type": "string",
                        "description": "Script used to build the app. It should build the app in debug mode and print path to the built app as a last line of its standard output."
                      },
                      "fingerprintCommand": {
                        "type": "string",
                        "description": "Script used to fingerprint the app. It should print workspace hash as a last line of its standard output."
                      }
                    }
                  },
                  "android": {
                    "type": "object",
                    "description": "Configuration for Android.",
                    "properties": {
                      "buildCommand": {
                        "type": "string",
                        "description": "Script used to build the app. It should build the app in debug mode and print path to the built app as a last line of its standard output."
                      },
                      "fingerprintCommand": {
                        "type": "string",
                        "description": "Script used to fingerprint the app. It should print workspace hash as a last line of its standard output."
                      }
                    }
                  }
                }
              },
              "eas": {
                "type": "object",
                "description": "Configuration for EAS build service",
                "properties": {
                  "android": {
                    "type": "object",
                    "description": "Configuration for EAS build service for Android",
                    "properties": {
                      "profile": {
                        "type": "string",
                        "description": "Profile used to build the app in EAS. Built app should be in debug version."
                      },
                      "buildUUID": {
                        "type": "string",
                        "description": "UUID of the EAS build used in `eas build:view` command."
                      }
                    },
                    "required": [
                      "profile"
                    ]
                  },
                  "ios": {
                    "type": "object",
                    "description": "Configuration for EAS build service for iOS",
                    "properties": {
                      "profile": {
                        "type": "string",
                        "description": "Profile used to build the app in EAS. Built app should be in debug version and have '\"ios.simulator\": true' option set."
                      },
                      "buildUUID": {
                        "type": "string",
                        "description": "UUID of the EAS build used in `eas build:view` command."
                      }
                    },
                    "required": [
                      "profile"
                    ]
                  }
                }
              },
              "ios": {
                "description": "Provides a way to customize Xcode builds for iOS",
                "type": "object",
                "properties": {
                  "scheme": {
                    "type": "string",
                    "description": "Scheme name (from xcode project) the IDE will use for iOS builds, defaults to xcworkspace base file name."
                  },
                  "configuration": {
                    "type": "string",
                    "description": "Build configuration name (from xcode project) the IDE will use for iOS builds, defaults to \"Debug\"."
                  }
                }
              },
              "android": {
                "description": "Provides a way to customize Gradle builds for Android",
                "type": "object",
                "properties": {
                  "buildType": {
                    "type": "string",
                    "description": "Android's build type used when building with Gradle, defaults to \"debug\"."
                  },
                  "productFlavor": {
                    "type": "string",
                    "description": "Android's build product flavor used when building with Gradle, by default no flavor is used."
                  }
                }
              },
              "packageManager": {
                "type": "string",
                "description": "Package manager used for the project. Available options include: npm, yarn, pnpm, bun."
              },
              "preview": {
                "description": "Customize the behavior of device preview",
                "type": "object",
                "properties": {
                  "waitForAppLaunch": {
                    "type": "boolean",
                    "description": "Defaults to `true`, this should only be set to `false` for brownfield setups when React Native components aren't rendered immediately after the app launches."
                  }
                }
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "type": "radon-ide",
            "request": "launch",
            "name": "Radon IDE panel",
            "ios": {
              "configuration": "Debug"
            },
            "android": {
              "buildType": "debug"
            }
          }
        ]
      },
      {
        "type": "react-native-ide",
        "label": "Radon IDE",
        "deprecated": "true",
        "languages": [
          "javascript",
          "typescript",
          "javascriptreact",
          "typescriptreact"
        ],
        "configurationAttributes": {
          "launch": {
            "required": [],
            "properties": {
              "appRoot": {
                "type": "string",
                "description": "Location of the React Native application root folder relative to the workspace. This is used for monorepo type setups when the workspace root is not the root of the React Native project. The IDE extension tries to locate the React Native application root automatically, but in case it failes to do so (i.e. there are multiple applications defined in the workspace), you can use this setting to override the location."
              },
              "isExpo": {
                "type": "boolean",
                "description": "IDE tries to detect whether project uses Expo or React Native community CLI. This is needed when starting the bundler. If your project uses Expo but IDE fails to automatically detect it, you can set this parameter to `true` to force the use of Expo CLI."
              },
              "env": {
                "type": "object",
                "description": "Environment variables to be passed to all build/run commands that the IDE is launching."
              },
              "metroConfigPath": {
                "type": "string",
                "description": "Location of Metro config relative to the workspace. This is used for using custom configs for e.g. development."
              },
              "expoStartArgs": {
                "type": "array",
                "description": "Extra arguments to pass to Expo start command."
              },
              "ios": {
                "description": "Provides a way to customize Xcode builds for iOS",
                "type": "object",
                "properties": {
                  "scheme": {
                    "type": "string",
                    "description": "Scheme name (from xcode project) the IDE will use for iOS builds, defaults to xcworkspace base file name."
                  },
                  "configuration": {
                    "type": "string",
                    "description": "Build configuration name (from xcode project) the IDE will use for iOS builds, defaults to \"Debug\"."
                  }
                }
              },
              "android": {
                "description": "Provides a way to customize Gradle builds for Android",
                "type": "object",
                "properties": {
                  "buildType": {
                    "type": "string",
                    "description": "Android's build type used when building with Gradle, defaults to \"debug\"."
                  },
                  "productFlavor": {
                    "type": "string",
                    "description": "Android's build product flavor used when building with Gradle, by default no flavor is used."
                  }
                }
              },
              "packageManager": {
                "type": "string",
                "description": "Package manager used for the project. Available options include: npm, yarn, pnpm, bun."
              },
              "preview": {
                "description": "Customize the behavior of device preview",
                "type": "object",
                "properties": {
                  "waitForAppLaunch": {
                    "type": "boolean",
                    "description": "Defaults to `true`, this should only be set to `false` for brownfield setups when React Native components aren't rendered immediately after the app launches."
                  }
                }
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "type": "react-native-ide",
            "request": "launch",
            "name": "Radon IDE panel",
            "ios": {
              "configuration": "Debug"
            },
            "android": {
              "buildType": "debug"
            }
          }
        ]
      }
    ],
    "walkthroughs": [
      {
        "id": "radon-ide",
        "title": "Get Started with Radon IDE",
        "description": "A full featured IDE for React Native and Expo",
        "steps": [
          {
            "id": "open-rn-expo-project",
            "title": "Open a React Native or Expo project",
            "description": "[Open](command:workbench.action.files.openFileFolder) or create a React Native or Expo project new one.\n[Open Project](command:workbench.action.files.openFileFolder)",
            "media": {
              "image": "media/radon-bubble.svg",
              "altText": "Radon IDE logo"
            }
          },
          {
            "id": "open-radon-ide-panel",
            "title": "Open Radon IDE Panel",
            "description": "Use the __Open IDE Panel__ button in the top-right corner or run ``Radon IDE: Open IDE Panel`` command in the [Command Palette](command:workbench.action.showCommands). \n[Open Panel](command:RNIDE.openPanel)",
            "media": {
              "markdown": "media/open-ide-panel.md"
            }
          },
          {
            "id": "create-new-device",
            "title": "Create new device",
            "description": "Use __Add iPhone__ or __Add Android__ button in the panel or use __Create new device__ button.",
            "media": {
              "markdown": "media/create-new-device.md"
            }
          },
          {
            "id": "wait-for-project",
            "title": "Wait for your project to build and run",
            "description": "Set back and relax as building the project for the first time might take may take a longer while. Encountered an issue with a build? \n[See Troubleshooting](https://ide.swmansion.com/docs/guides/troubleshooting)",
            "media": {
              "markdown": "media/wait-for-project-to-build.md"
            }
          },
          {
            "id": "explore-features",
            "title": "Explore features",
            "description": "Explore all the Radon IDE features on your own or see [feature highlight](https://ide.swmansion.com/docs/getting-started/feature-highlight) on our website.\nTake a look at our [Release Notes](https://github.com/software-mansion/radon-ide/releases) to learn about all the newest features and improvements in Radon IDE. \n[Open Feature Highlight](https://ide.swmansion.com/docs/getting-started/feature-highlight)",
            "media": {
              "markdown": "media/explore-features.md"
            }
          }
        ]
      }
    ],
    "icons": {
      "radon-off": {
        "description": "Shutdown icon",
        "default": {
          "fontPath": "assets/font-icons.woff2",
          "fontCharacter": "\\E001"
        }
      }
    }
  },
  "scripts": {
    "vscode:package": "vsce package",
    "vscode:prepublish": "npm run package",
    "vscode:publish": "vsce publish",
    "open-vsx:publish": "ovsx publish",
    "copy:redux-devtools-plugin": "rm -rf lib/plugins/third-party/redux-devtools-expo-dev-plugin.js && cp ../redux-devtools-expo-dev-plugin/artifacts/RadonIDE/redux-devtools-expo-dev-plugin.js lib/plugins/third-party/redux-devtools-expo-dev-plugin.js",
    "build:redux-devtools-ui": "rm -rf dist/redux-devtools && cp -R ../redux-devtools-expo-dev-plugin/artifacts/RadonIDE/redux-devtools dist/redux-devtools",
    "build:react-query-devtools-ui": "rm -rf dist/react-query-devtools && cp -R ../radon-ide-react-query-webui/artifacts dist/react-query-devtools",
    "build:chrome-devtools-ui": "rm -rf dist/network-devtools-frontend && cp -R ../chrome-devtools-ui/build_artifacts/RadonIDE/gen/front_end/ dist/network-devtools-frontend",
    "build:third-party": "npm run build:chrome-devtools-ui && npm run build:redux-devtools-ui && npm run build:react-query-devtools-ui",
    "build:extension-debug": "npm run prepare:fake_editor && npm run fetch:third-party && node ./scripts/buildExtensionCode.mjs debug && npm run build:third-party",
    "build:extension": "npm run prepare:fake_editor && node ./scripts/buildExtensionCode.mjs production && npm run build:third-party",
    "build:webview": "vite build --mode production && cp ./node_modules/@vscode/codicons/dist/codicon.* dist/.",
    "build:sim-server-debug": "bash ./scripts/build-sim-server-debug.sh dist",
    "build:vscode-js-debug": "cd ../vscode-js-debug && npm i && npm exec tsc && npm run compile && cp dist/src/chromehash_bg.wasm ../vscode-extension/dist/",
    "build:debug": "npm run build:extension-debug && npm run build:sim-server-debug",
    "build:dist": "npm run fetch:third-party && npm run fetch:sim-server-assets && npm run build:extension && npm run build:webview && npm run build:third-party-notice",
    "build:third-party-notice": "node ./scripts/mergeThirdPartyNotices.mjs ./submodules-NOTICES.json ./dist/simulator-server-NOTICES.json ./dist/webview-NOTICES.json ./dist/extension-NOTICES.json ./ThirdPartyNotices.json",
    "prepare:fake_editor": "mkdir -p dist && cp react-fake-editor-executable dist/atom",
    "watch:extension": "vite",
    "package": "rm -rf dist/* && cp ../vscode-js-debug/dist/src/chromehash_bg.wasm dist/ && npm run build:dist",
    "lint": "eslint src/**/*.\\{ts,tsx,js,jsx\\} && prettier --check src",
    "typecheck": "tsc --noEmit",
    "format": "prettier --write --list-different src",
    "build:tests": "tsc --project tsconfig.test.json",
    "build:plugins": "bash ./scripts/install-dev-plugins.sh",
    "build:icons": "fantasticon -c ./font-icons/fantasticon.config.json",
    "test": "npm run build:extension && npm run build:webview && npm run build:tests && vscode-test",
    "preinstall": "mkdir -p dist && bash ./scripts/init-submodules-if-not-present.sh ../vscode-js-debug && npm run build:vscode-js-debug",
    "fetch:sim-server-assets": "bash ./scripts/download-sim-server-release-assets.sh dist",
    "fetch:third-party": "bash ./scripts/init-submodules-if-not-present.sh ../chrome-devtools-ui ../redux-devtools-expo-dev-plugin ../radon-ide-react-query-webui",
    "postinstall": "patch-package"
  },
  "devDependencies": {
    "@babel/preset-react": "^7.23.3",
    "@expo/fingerprint": "^0.10.3",
    "@expo/package-manager": "^1.1.2",
    "@msgpack/msgpack": "^2.8.0",
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-context-menu": "^2.1.5",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-radio-group": "^1.1.3",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@react-native-community/cli-config": "^15.1.3",
    "@react-native-community/cli-types": "^15.1.3",
    "@types/glob": "^7.1.3",
    "@types/lodash": "^4.14.202",
    "@types/node": "^18.19.3",
    "@types/node-fetch": "^2.6.9",
    "@types/plist": "^3.0.5",
    "@types/react": "^18.2.45",
    "@types/semver": "^7.5.8",
    "@types/sinon": "^17.0.3",
    "@types/tar": "^6.1.11",
    "@types/uuid": "^9.0.7",
    "@types/vscode": "^1.46.0",
    "@types/ws": "^8.5.10",
    "@types/xml2js": "^0.4.14",
    "@typescript-eslint/eslint-plugin": "^4.14.1",
    "@typescript-eslint/parser": "^4.14.1",
    "@vitejs/plugin-react": "^4.2.1",
    "@vscode/codicons": "^0.0.35",
    "@vscode/debugadapter": "^1.51.0",
    "@vscode/debugprotocol": "^1.51.0",
    "@vscode/extension-telemetry": "github:software-mansion-labs/vscode-extension-telemetry",
    "@vscode/test-cli": "^0.0.9",
    "@vscode/test-electron": "^2.4.0",
    "@vscode/vsce": "^2.22.0",
    "@vscode/webview-ui-toolkit": "^1.3.1",
    "babel-loader": "^9.1.3",
    "chrome-remote-interface": "^0.33.0",
    "classnames": "^2.5.1",
    "coordinate-parser": "^1.0.7",
    "esbuild": "^0.19.9",
    "esbuild-plugin-license": "^1.2.3",
    "eslint": "^7.19.0",
    "eslint-import-resolver-typescript": "^3.6.3",
    "eslint-plugin-import": "^2.30.0",
    "execa": "^5.1.1",
    "fantasticon": "^3.0.0",
    "file-loader": "^6.2.0",
    "glob": "^7.1.6",
    "lodash": "^4.17.21",
    "minimatch": "^9.0.4",
    "mocha": "^10.4.0",
    "node-fetch": "^2.7.0",
    "patch-package": "^8.0.0",
    "ovsx": "^0.10.1",
    "plist": "^3.1.0",
    "prettier": "^2.2.1",
    "re-resizable": "^6.9.16",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.53.2",
    "react-scan": "https://github.com/software-mansion-labs/react-scan/releases/download/0.1.3-radon-2/react-scan-0.1.3-radon-2.tgz",
    "rollup": "^4.18.1",
    "rollup-plugin-license": "^3.5.3",
    "semver": "^7.6.2",
    "sinon": "^18.0.0",
    "source-map": "^0.8.0-beta.0",
    "tar": "^7.4.3",
    "ts-loader": "^9.5.1",
    "typescript": "^5.6.2",
    "url-loader": "^4.1.1",
    "uuid": "^9.0.1",
    "vite": "^5.0.8",
    "vscode-cdp-proxy": "^0.2.1",
    "vscode-js-debug": "file:../vscode-js-debug",
    "vscode-test": "^1.5.0",
    "ws": "^8.14.2",
    "xml2js": "^0.6.2"
  },
  "optionalDependencies": {
    "@rollup/rollup-linux-x64-gnu": "4.9.5"
  }
}
