.hero {
  display: flex;
  align-items: center;
  padding: 64px 24px 0;
  justify-content: center;
}
.heading {
  color: var(--ifm-color-primary);
}

.preheadingLabel {
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: 16px;
  line-height: 24px;
}

.preheadingLabel span.left {
  color: var(--radon-color-grey-dark);
}

.preheadingLabel span.center {
  font-weight: 700;
}
p.preheadingLabel {
  gap: 8px;
  margin: 0 auto;
}

.headingLabel {
  color: var(--ifm-color-primary);
  text-align: center;
  font-size: 64px;
  font-weight: 400;
  line-height: 72px;
  padding: 24px 0;
}

.headingLabel span.headingIde {
  color: var(--swm-green-light-100);
  font-weight: 700;
}
.headingLabel span.headingRN {
  font-weight: 500;
}

.gradient {
  max-width: 1360px;
  background: var(
    --Radial-green,
    radial-gradient(
      50% 50% at 50% 50%,
      var(--radon-gradient-green) 55.29%,
      var(--radon-gradient-black) 100%
    )
  );
  display: flex;
  justify-content: center;
  z-index: 4;
}

.imageContainer {
  display: flex;
  justify-content: center;
  position: relative;
  margin-top: 6%;
  padding: 0 60px;
}

.heroImage {
  max-width: 1200px;
  width: 100%;
  height: auto;
  z-index: 5;
}

.subheadingLabel {
  color: var(--radon-subheading);
  text-align: center;
  font-size: 20px;
  font-weight: 400;
  line-height: 32px;
}

.subheadingLabel p {
  display: none;
  font-size: inherit;
  margin: 0;
}

.subheadingLabel p span {
  font-weight: 500;
}

.buttonContainer {
  padding: 32px 0;
}

.headingDisclaimer {
  color: var(--radon-color-grey-dark);
  text-align: center;

  font-size: 16px;
  font-weight: 400;
  line-height: 24px;
}

@media (max-width: 800px) {
  .imageContainer {
    padding: 0;
  }
}

@media (max-width: 730px) {
  .hero {
    padding: 24px 24px 0;
  }

  .heading p {
    text-align: left;
  }

  .preheadingLabel {
    display: none;
  }

  .headingLabel {
    font-size: 32px;
    line-height: normal;
    text-align: left;
  }

  .subheadingLabel {
    display: inline-block;
    text-align: left;
  }

  .subheadingLabel p {
    display: inline;
  }

  br {
    display: none;
  }
}

/*   Open state of the dialog  */
dialog[open] {
  opacity: 1;
}

/*   Closed state of the dialog   */
dialog {
  overflow: hidden;
  box-sizing: border-box;
  border: none;
  max-width: 1280px;
  width: 100%;
  opacity: 0;
  transform: translateY(0px);
  transition: all 0.3s allow-discrete;
  padding: 2rem;
}

/*   Before-open state  */
/* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog[open] {
    opacity: 0;
    transform: translateY(50px);
  }
}

/* Transition the :backdrop when the dialog modal is promoted to the top layer */
dialog::backdrop {
  background-color: rgb(0 0 0 / 0%);
  transition: all 0.3s allow-discrete;
  user-select: none;
}

dialog[open]::backdrop {
  background-color: rgb(0 0 0 / 25%);
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 0%);
  }
}

.responsiveIframe {
  aspect-ratio: 16 / 9;
  max-width: 1200px;
}

html:has(dialog[open]) {
  overflow: hidden;
}

.dialogCloseButton {
  position: absolute;
  padding: 6px;
  height: 32px;
  width: 32px;
  top: 3px;
  right: 3px;
  cursor: pointer;
  background-color: transparent;
  border: none;
}
